const { default: makeWASocket, useMultiFileAuthState, fetchLatestBaileysVersion } = require('@whiskeysockets/baileys');
const Pino = require('pino');
const cron = require('node-cron');
const fs = require('fs');
const qrcode = require('qrcode-terminal');
const http = require('http');

require('http').createServer((req, res) => res.end('Hello, world!')).listen(3000);


// Load prayer times from a JSON file
const prayerTimes = JSON.parse(fs.readFileSync('prayerTimes.json', 'utf-8'));

async function startBot() {
    const { state, saveCreds } = await useMultiFileAuthState('auth');
    const { version } = await fetchLatestBaileysVersion();

    const sock = makeWASocket({
        version,
        auth: state,
        logger: Pino({ level: 'silent' })
    });

    sock.ev.on('creds.update', saveCreds);
    sock.ev.on('connection.update', async (update) => {
        const { connection, qr } = update;
        if (qr) {
            // Display the QR code in the terminal
            qrcode.generate(qr, { small: true });
        }
        if (connection === 'close') {
            // Wrap the reconnection in try-catch to handle errors
        try {
            await startBot();
          } catch (error) {
            console.error("Error reconnecting:", error);
            // Optionally, you can retry after a delay:
            setTimeout(startBot, 5000);
          }
        } else if (connection === 'open') {
            console.log('Bot connected! โ');
        }
    });

    sock.ev.on('messages.upsert', async ({ messages }) => {
        const msg = messages[0];
        if (!msg.message) return;
        const sender = msg.key.remoteJid;
        const text = msg.message.conversation || msg.message.extendedTextMessage?.text;

        // Manage subscriptions via simple commands
        if (text?.toLowerCase() === 'start') {
            let subscribers = fs.existsSync('subscribers.json')
                ? JSON.parse(fs.readFileSync('subscribers.json', 'utf-8'))
                : [];
            if (!subscribers.includes(sender)) {
                subscribers.push(sender);
                fs.writeFileSync('subscribers.json', JSON.stringify(subscribers));
            }
            await sock.sendMessage(sender, { text: 'You have subscribed to prayer time reminders! โ' });
        } else if (text?.toLowerCase() === 'stop') {
            let subscribers = fs.existsSync('subscribers.json')
                ? JSON.parse(fs.readFileSync('subscribers.json', 'utf-8'))
                : [];
            subscribers = subscribers.filter(sub => sub !== sender);
            fs.writeFileSync('subscribers.json', JSON.stringify(subscribers));
            await sock.sendMessage(sender, { text: 'You have unsubscribed from prayer time reminders. โ' });
        } else if (text?.toLowerCase() === 'list') {
            // Get today's prayer times
            const now = new Date();
            const currentMonth = now.toLocaleString('default', { month: 'long' });
            const currentDay = now.getDate();
    
            if (!prayerTimes[currentMonth]) {
                await sock.sendMessage(sender, { text: `Prayer times for ${currentMonth} not found.` });
                return;
            }
    
            const monthTimes = prayerTimes[currentMonth];
            let dayRangeKey = null;
            for (const range in monthTimes) {
                const [start, end] = range.split('-').map(Number);
                if (currentDay >= start && currentDay <= end) {
                    dayRangeKey = range;
                    break;
                }
            }
    
            if (!dayRangeKey) {
                await sock.sendMessage(sender, { text: `Prayer times for day ${currentDay} not found in month ${currentMonth}.` });
                return;
            }
    
            const todaysPrayerTimes = monthTimes[dayRangeKey];
    
            // Format prayer times
            let prayerTimesText = `๐ *Today's Prayer Times*\n\n`;
            Object.entries(todaysPrayerTimes).forEach(([prayer, time]) => {
                prayerTimesText += `๐ *${prayer}*: ${time}\n`;
            });

            let subscribers = fs.existsSync('subscribers.json')
                ? JSON.parse(fs.readFileSync('subscribers.json', 'utf-8'))
                : [];
    
            prayerTimesText += `\n๐ฅ *Active Subscribers*: ${subscribers.length}`;
    
            // Send prayer times and subscriber count
            await sock.sendMessage(sender, { text: prayerTimesText });
        }
    });

    // Schedule prayer reminders based on current date
    const now = new Date();
    const currentMonth = now.toLocaleString('default', { month: 'long' });
    const currentDay = now.getDate();

    if (!prayerTimes[currentMonth]) {
        console.error(`Prayer times for ${currentMonth} not found.`);
        return;
    }
    const monthTimes = prayerTimes[currentMonth];
    let dayRangeKey = null;
    for (const range in monthTimes) {
        const [start, end] = range.split('-').map(Number);
        if (currentDay >= start && currentDay <= end) {
            dayRangeKey = range;
            break;
        }
    }
    if (!dayRangeKey) {
        console.error(`Prayer times for day ${currentDay} not found in month ${currentMonth}.`);
        return;
    }
    const todaysPrayerTimes = monthTimes[dayRangeKey];
    const timeZone = 'Asia/Kolkata';

    // Schedule a cron job for each prayer time
    Object.entries(todaysPrayerTimes).forEach(([prayer, timeValue]) => {
        const timeStr = timeValue.toFixed(2);
        const parts = timeStr.split('.');
        let hour = parts[0];
        let minute = parts[1] || "00";
        if (minute.length === 1) minute = '0' + minute;
        const cronTime = `${minute} ${hour} * * *`;
        cron.schedule(cronTime, async () => {
            const msg = [{
                "Subah": [
                    {
                        "message": "เดซเดเตโเตผ เดจเดฎเดธเตเดเดพเดฐเด! เดชเตเดฐเดญเดพเดคเดคเตเดคเดฟเดฒเต เดเตเตผเดเตป เดชเดพเดฐเดพเดฏเดฃเด เดธเดพเดเตเดทเตเดฏเด เดตเดนเดฟเดเตเดเดชเตเดชเตเดเตเดจเตเดจเดคเดพเดฃเต. เด เดชเตเดฒเดฐเดฟเดฏเดฟเตฝ เดเตเตผเดเตป เดชเดพเดฐเดพเดฏเดฃเด เดเตเดฏเตเดคเต เดเดฒเตเดฒเดพเดนเตเดตเดฟเตปเตเดฑเต เดเดจเตเดเตเดฐเดนเด เดคเตเดเดพเด."
                    },
                    {
                        "message": "เดฑเดฎเดฆเดพเดจเดฟเดฒเต เด เดชเตเดฐเดญเดพเดคเดคเตเดคเดฟเตฝ, เดซเดเตโเดฑเดฟเตปเตเดฑเต เดถเดพเดจเตเดคเดคเดฏเดฟเตฝ เดจเดฌเดฟ(เดธ) เดชเดฑเดเตเดเต: เดฐเดฃเตเดเต เดฑเดเตเดเดคเตเดคเต เดซเดเตโเตผ เดจเดฎเดธเตเดเดพเดฐเด, เด เดฒเตเดเดคเตเดคเตเดเตเดเดพเดณเตเด เดเดคเดฟเดฒเตเดณเตเดณเดคเดฟเดจเตเดเตเดเดพเดณเตเด เดเดคเตเดคเดฎเดฎเดพเดฃเต. เด เดชเตเดฃเตเดฏเดคเตเดคเดฟเตฝ เดชเดเตเดเตเดเตเดฐเดพเด."
                    },
                    {
                        "message": "เดซเดเตโเตผ เดธเดฎเดฏเด! เดเดฒเตเดฒเดพเดนเตเดตเดฟเตปเตเดฑเต เดธเตเดฎเดฐเดฃเดฏเดฟเตฝ เดเดฐเต เดชเตเดคเดฟเดฏ เดฆเดฟเดจเด เดเดฐเดเดญเดฟเดเตเดเดพเด. เดจเดฟเดเตเดเดณเตเดเต เดฐเดเตเดทเดฟเดคเดพเดตเดฟเดจเต เดฎเดจเดธเตเดธเดฟเตฝ เดตเดฟเดจเดฏเดคเตเดคเตเดเตเด เดญเดฏเดคเตเดคเตเดเตเด เดเตเดเดฟ เดถเดฌเตเดฆเดฎเตเดฏเตผเดคเตเดคเดพเดคเต เดฐเดพเดตเดฟเดฒเตเดฏเตเด เดตเตเดเตเดจเตเดจเตเดฐเดตเตเด เดธเตเดฎเดฐเดฟเดเตเดเตเด."
                    },
                    {
                        "message": "เดซเดเตโเตผ เดจเดฎเดธเตเดเดพเดฐเด! เด เดชเตเดฒเดฐเดฟเดฏเดฟเตฝ, เดจเดฟเดเตเดเดณเตเดเต เดนเตเดฆเดฏเดคเตเดคเดฟเดฒเต เดจเดจเตเดฎเดเดณเต เดเดฃเตผเดคเตเดคเตเด. เด เดฆเดฟเดตเดธเด เดจเดฟเดเตเดเตพเดเตเดเต เดเดจเตเดเตเดฒเดฎเดพเดตเดเตเดเต."
                    },
                    {
                        "message": "เดซเดเตโเตผ! เด เดชเตเดฐเดญเดพเดคเดคเตเดคเดฟเตฝ, เดจเดฟเดเตเดเดณเตเดเต เดชเตเดฐเดฟเดฏเดชเตเดชเตเดเตเดเดตเตผเดเตเดเต เดตเตเดฃเตเดเดฟ เดชเตเดฐเดพเตผเดคเตเดฅเดฟเดเตเดเตเด. เดเดตเดฐเตเดเต เดธเดจเตเดคเตเดทเดคเตเดคเดฟเดจเดพเดฏเดฟ เดเดฒเตเดฒเดพเดนเตเดตเดฟเดจเตเดเต เดเดชเตเดเตเดทเดฟเดเตเดเตเด."
                    },
                    {
                        "message": "เดชเตเดฒเดฐเดฟเดฏเตเดเต เดถเดพเดจเตเดคเดคเดฏเดฟเตฝ, เดซเดเตโเตผ เดจเดฎเดธเตเดเดพเดฐเดคเตเดคเดฟเดฒเตเดเต เดนเตเดฆเดฏเด เดฆเตเดตเดธเตเดฎเดฐเดฃเดฏเดฟเตฝ เดฒเดฏเดฟเดชเตเดชเดฟเดเตเดเดพเด. เด เดฆเดฟเดจเด เดเดจเตเดเตเดฐเดนเดชเตเตผเดฃเตเดฃเดฎเดพเดเดเตเดเต."
                    },
                    {
                        "message": "เดซเดเตโเตผ เดจเดฎเดธเตเดเดพเดฐเด! เดชเตเดฐเดญเดพเดคเดคเตเดคเดฟเดฒเต เด เดถเดพเดจเตเดคเดคเดฏเดฟเตฝ, เดฎเดจเดธเตเดธเดฟเดจเต เดถเตเดฆเตเดงเตเดเดฐเดฟเดเตเดเดพเด. เดเดฐเต เดชเตเดคเดฟเดฏ เดคเตเดเดเตเดเดคเตเดคเดฟเดจเดพเดฏเดฟ เดคเดฏเตเดฏเดพเดฑเตเดเตเดเตเดเดพเด."
                    },
                    {
                        "message": "เดจเดฌเดฟ(เดธ) เดชเดฑเดเตเดเต: เดเดฐเตเดเตเดเดฟเดฒเตเด เดซเดเตโเตผ เดจเดฎเดธเตเดเดฐเดฟเดเตเดเดพเตฝ เดเดตเตป เดเดฒเตเดฒเดพเดนเตเดตเดฟเตปเตเดฑเต เดธเดเดฐเดเตเดทเดฃเดคเตเดคเดฟเดฒเดพเดฏเดฟ. เด เดธเดเดฐเดเตเดทเดฃเด เดจเตเดเดพเด."
                    },
                    {
                        "message": "เดซเดเตโเตผ เดจเดฎเดธเตเดเดพเดฐเด! เด เดชเตเดฒเดฐเดฟเดฏเดฟเตฝ, เดจเดฟเดเตเดเดณเตเดเต เดคเตเดฑเตเดฑเตเดเตพ เดเตผเดคเตเดคเต เดชเดถเตเดเดพเดคเตเดคเดชเดฟเดเตเดเตเด. เดจเดฒเตเดฒ เดเดฟเดจเตเดคเดเดณเตเดเต เดฎเตเดจเตเดจเตเดเตเดเต เดชเตเดเดพเดจเดพเดฏเดฟ เดเดฒเตเดฒเดพเดนเตเดตเดฟเดจเตเดเต เดชเตเดฐเดพเตผเดคเตเดฅเดฟเดเตเดเตเด."
                    },
                    {
                        "message": "เดซเดเตโเตผ! เด เดชเตเดฒเดฐเดฟเดฏเดฟเตฝ, เดเดฒเตเดฒเดพเดนเตเดตเดฟเตปเตเดฑเต เดเดจเตเดเตเดฐเดนเด เดคเตเดเดพเด. เด เดฆเดฟเดตเดธเด เดจเดฒเตเดฒ เดคเตเดเดเตเดเดฎเดพเดเดเตเดเต."
                    }
                ]
            }, {
                "Luhar": [
                    {
                        "message": "เดณเตเดนเตผ เดจเดฎเดธเตเดเดพเดฐเด! เดจเดฎเดธเตเดเดพเดฐเด เดจเดฟเดฒเดจเดฟเตผเดคเตเดคเตเด เดคเตเตผเดเตเดเดฏเดพเดฏเตเด เดจเดฎเดธเตเดเดพเดฐเด เดจเตเดเดตเตเด เดจเดฟเดทเดฟเดฆเตเดงเดตเตเดฎเดพเดฏ เดเดพเดฐเตเดฏเดเตเดเดณเดฟเตฝ เดจเดฟเดจเตเดจเต เดคเดเดฏเตเดจเตเดจเต. เด เดเดเตเดเดธเดฎเดฏเดคเตเดคเต, เดจเดฎเตเดฎเตเดเต เดเดเดฎเดเดณเตเดเตเดเตเดฑเดฟเดเตเดเต เดเดฟเดจเตเดคเดฟเดเตเดเดพเด."
                    },
                    {
                        "message": "เดฑเดฎเดฆเดพเดจเดฟเดฒเต เด เดเดเตเดเดฏเดฟเตฝ, เดณเตเดนเตผ เดจเดฎเดธเตเดเดพเดฐเดคเตเดคเดฟเดฒเตเดเต เดจเดฌเดฟ(เดธ) เดชเดฑเดเตเดเต: เดธเดฎเดฏเด เดคเตเดฑเตเดฑเดพเดคเต เดจเดฎเดธเตโเดเดฐเดฟเดเตเดเตเดจเตเดจเดตเตปเตเดฑเต เดเตเดตเดฟเดคเดคเตเดคเดฟเตฝ เดเดฒเตเดฒเดพเดนเต เดฌเตผเดเดคเตเดคเต เดจเตฝเดเตเด. เด เดเดจเตเดเตเดฐเดนเด เดจเตเดเดพเตป เดถเตเดฐเดฎเดฟเดเตเดเดพเด."
                    },
                    {
                        "message": "เดณเตเดนเตผ เดธเดฎเดฏเด! เดเดฒเตเดฒเดพเดนเตเดตเดฟเตปเตเดฑเต เดธเตเดฎเดฐเดฃเดฏเดฟเตฝ เดจเดฎเตเดฎเตเดเต เดฎเดจเดธเตเดธเดฟเดจเต เดถเดพเดจเตเดคเดฎเดพเดเตเดเดพเด. เดจเดฟเดเตเดเตพ เดเดฒเตเดฒเดพเดนเตเดตเดฟเดจเต เดงเดพเดฐเดพเดณเดฎเดพเดฏเดฟ เดธเตเดฎเดฐเดฟเดเตเดเตเด. เดจเดฟเดเตเดเตพเดเตเดเต เดตเดฟเดเดฏเด เดชเตเดฐเดคเตเดเตเดทเดฟเดเตเดเดพเด."
                    },
                    {
                        "message": "เดณเตเดนเตผ เดจเดฎเดธเตเดเดพเดฐเด! เด เดเดเตเดเดธเดฎเดฏเดคเตเดคเต, เดจเดฟเดเตเดเดณเตเดเต เดคเดฟเดฐเดเตเดเตเดเดณเดฟเตฝ เดจเดฟเดจเตเดจเต เดเตฝเดชเดธเดฎเดฏเด เดฎเดพเดฑเตเดฑเดฟ เดเดฒเตเดฒเดพเดนเตเดตเดฟเดจเต เดเตผเดเตเดเตเด. เดจเดฟเดเตเดเดณเตเดเต เดเตเดตเดฟเดคเดคเตเดคเดฟเดฒเต เดเดเดฎเดเดณเตเดเตเดเตเดฑเดฟเดเตเดเต เดเดฟเดจเตเดคเดฟเดเตเดเตเด."
                    },
                    {
                        "message": "เดณเตเดนเตผ! เด เดเดเตเดเดธเดฎเดฏเดคเตเดคเต, เดจเดฟเดเตเดเดณเตเดเต เดเตเดฑเตเดฑเตเดฎเตเดณเตเดณเดตเตผเดเตเดเต เดตเตเดฃเตเดเดฟ เดชเตเดฐเดพเตผเดคเตเดฅเดฟเดเตเดเตเด. เดเดตเดฐเตเดเต เดธเดจเตเดคเตเดทเดคเตเดคเดฟเดจเดพเดฏเดฟ เดเดฒเตเดฒเดพเดนเตเดตเดฟเดจเตเดเต เดเดชเตเดเตเดทเดฟเดเตเดเตเด."
                    },
                    {
                        "message": "เดเดเตเดเดตเตเดฏเดฟเดฒเดฟเตปเตเดฑเต เดเตเดเดฟเดฒเตเด, เดณเตเดนเตผ เดจเดฎเดธเตเดเดพเดฐเดคเตเดคเดฟเดฒเตเดเต เดฎเดจเดธเตเดธเดฟเดจเต เดถเดพเดจเตเดคเดฎเดพเดเตเดเดพเด. เด เดธเดฎเดฏเด เดชเตเดฐเดพเตผเดคเตเดฅเดจเดเตพเดเตเดเต เดฎเดพเดฑเตเดฑเดฟเดตเตเดเตเดเดพเด."
                    },
                    {
                        "message": "เดณเตเดนเตผ เดจเดฎเดธเตเดเดพเดฐเด! เดจเตเดฎเตเดชเดฟเตปเตเดฑเต เดเตเดทเตเดฃเดคเตเดคเดฟเดฒเตเด, เดฆเตเดตเดธเตเดฎเดฐเดฃเดฏเดฟเตฝ เดฎเตเดดเตเดเดพเด. เด เดธเดฎเดฏเด เดธเตฝเดเตผเดฎเตเดฎเดเตเดเตพเดเตเดเดพเดฏเดฟ เดเดชเดฏเตเดเดฟเดเตเดเดพเด."
                    },
                    {
                        "message": "เดณเตเดนเตผ เดจเดฎเดธเตเดเดพเดฐเด! เด เดเดเตเดเดฏเดฟเตฝ, เดจเดฟเดเตเดเดณเตเดเต เดคเตเดฑเตเดฑเตเดเตพ เดเตผเดคเตเดคเต เดชเดถเตเดเดพเดคเตเดคเดชเดฟเดเตเดเตเด. เดจเดฒเตเดฒ เดเดฟเดจเตเดคเดเดณเตเดเต เดฎเตเดจเตเดจเตเดเตเดเต เดชเตเดเดพเดจเดพเดฏเดฟ เดเดฒเตเดฒเดพเดนเตเดตเดฟเดจเตเดเต เดชเตเดฐเดพเตผเดคเตเดฅเดฟเดเตเดเตเด."
                    },
                    {
                        "message": "เดณเตเดนเตผ เดธเดฎเดฏเด! เด เดชเตเดฃเตเดฏเดฎเดพเดธเดคเตเดคเดฟเตฝ, เดจเดฟเดเตเดเดณเตเดเต เดเตเดตเดฟเดคเดคเตเดคเดฟเดฒเต เดฒเดเตเดทเตเดฏเดเตเดเดณเตเดเตเดเตเดฑเดฟเดเตเดเต เดเดฟเดจเตเดคเดฟเดเตเดเตเด. เดจเดฟเดเตเดเดณเตเดเต เดธเตเดตเดชเตเดจเดเตเดเตพ เดฏเดพเดฅเดพเตผเดคเตเดฅเตเดฏเดฎเดพเดเตเดเดพเตป เดเดฒเตเดฒเดพเดนเตเดตเดฟเดจเตเดเต เดชเตเดฐเดพเตผเดคเตเดฅเดฟเดเตเดเตเด."
                    },
                    {
                        "message": "เดณเตเดนเตผ! เด เดเดเตเดเดธเดฎเดฏเดคเตเดคเต, เดเดฒเตเดฒเดพเดนเตเดตเดฟเตปเตเดฑเต เดเดพเดฐเตเดฃเตเดฏเด เดคเตเดเดพเด. เดจเดฎเตเดฎเตเดเต เดชเตเดฐเดฟเดฏเดชเตเดชเตเดเตเดเดตเตผเดเตเดเตเด เดฒเตเดเดคเตเดคเดฟเดจเตเด เดตเตเดฃเตเดเดฟ เดชเตเดฐเดพเตผเดคเตเดฅเดฟเดเตเดเดพเด."
                    }
                ]
            }, {
                "Asar": [
                    {
                        "message": "เดเดธเตผ เดจเดฎเดธเตเดเดพเดฐเด! เดจเดฎเดธเตเดเดพเดฐเดเตเดเตพ เดธเตเดเตเดทเดฟเดเตเดเตเด. เดชเตเดฐเดคเตเดฏเตเดเดฟเดเตเดเตเด เดฎเดฆเตเดงเตเดฏ เดจเดฎเดธเตเดเดพเดฐเด (เดเดธเตผ). เดเดฒเตเดฒเดพเดนเตเดตเดฟเตปเตเดฑเต เดฎเตเดฎเตเดชเดฟเตฝ เดจเดฟเดเตเดเตพ เดญเดฏเดญเดเตเดคเดฟเดฏเตเดเต เดจเดฟเตฝเดเตเดเตเด. เด เดธเดพเดฏเดพเดนเตเดจเดคเตเดคเดฟเตฝ, เดจเดฎเตเดฎเตเดเต เดเตเดตเดฟเดคเดคเตเดคเดฟเดฒเต เดจเดฒเตเดฒ เดเดพเดฐเตเดฏเดเตเดเดณเต เดเตผเดคเตเดคเต เดจเดจเตเดฆเดฟ เดชเดฑเดฏเดพเด."
                    },
                    {
                        "message": "เดฑเดฎเดฆเดพเดจเดฟเดฒเต เด เดธเดพเดฏเดพเดนเตเดจเดคเตเดคเดฟเตฝ, เดเดธเตผ เดจเดฎเดธเตเดเดพเดฐเดคเตเดคเดฟเดฒเตเดเต เดจเดฌเดฟ(เดธ) เดชเดฑเดเตเดเต: เดเดฐเตเดเตเดเดฟเดฒเตเด เดเดธเตผ เดจเดฎเดธเตเดเดพเดฐเด เดเดดเดฟเดตเดพเดเตเดเดฟเดฏเดพเตฝ เดเดตเตปเตเดฑเต เดเตผเดฎเตเดฎเดเตเดเตพ เดจเดทเตเดเดชเตเดชเตเดเตเดเต. เด เดธเดฎเดฏเด เดชเตเดฐเดพเตผเดคเตเดฅเดจเดเตพเดเตเดเต เดฎเดพเดฑเตเดฑเดฟเดตเตเดเตเดเดพเด."
                    },
                    {
                        "message": "เดเดธเตผ เดธเดฎเดฏเด! เดเดฒเตเดฒเดพเดนเตเดตเดฟเตปเตเดฑเต เดธเตเดฎเดฐเดฃเดฏเดฟเตฝ เดจเดฎเตเดฎเตเดเต เดฎเดจเดธเตเดธเดฟเดจเต เดถเดพเดจเตเดคเดฎเดพเดเตเดเดพเด. เดเตเดทเดฎเดฏเตเดเตเดฏเตเด เดจเดฎเดธเตเดเดพเดฐเดคเตเดคเดฟเดฒเตเดเตเดฏเตเด เดจเดฟเดเตเดเตพ เดธเดนเดพเดฏเด เดคเตเดเตเด. เดคเตเตผเดเตเดเดฏเดพเดฏเตเด เดเดฒเตเดฒเดพเดนเต เดเตเดทเดฎเดฟเดเตเดเตเดจเตเดจเดตเดฐเตเดเตเดชเตเดชเดฎเดพเดฃเต."
                    },
                    {
                        "message": "เดเดธเตผ เดจเดฎเดธเตเดเดพเดฐเด! เด เดธเดพเดฏเดพเดนเตเดจเดคเตเดคเดฟเตฝ, เดจเดฟเดเตเดเดณเตเดเต เดเตเดตเดฟเดคเดคเตเดคเดฟเดฒเต เดจเดฒเตเดฒ เดเดพเดฐเตเดฏเดเตเดเดณเต เดเตผเดคเตเดคเต เดจเดจเตเดฆเดฟ เดชเดฑเดฏเตเด. เดเดฒเตเดฒเดพเดนเตเดตเดฟเตปเตเดฑเต เดเดจเตเดเตเดฐเดนเดคเตเดคเดฟเดจเต เดจเดจเตเดฆเดฟ เดชเดฑเดฏเตเด."
                    },
                    {
                        "message": "เดเดธเตผ! เด เดธเดพเดฏเดพเดนเตเดจเดคเตเดคเดฟเตฝ, เดจเดฟเดเตเดเดณเตเดเต เดเตเดฑเตเดฑเตเดฎเตเดณเตเดณเดตเตผเดเตเดเต เดตเตเดฃเตเดเดฟ เดชเตเดฐเดพเตผเดคเตเดฅเดฟเดเตเดเตเด. เดเดตเดฐเตเดเต เดธเดจเตเดคเตเดทเดคเตเดคเดฟเดจเดพเดฏเดฟ เดเดฒเตเดฒเดพเดนเตเดตเดฟเดจเตเดเต เดเดชเตเดเตเดทเดฟเดเตเดเตเด."
                    },
                    {
                        "message": "เดธเดพเดฏเดพเดนเตเดจเดคเตเดคเดฟเตปเตเดฑเต เดฎเดจเตเดนเดพเดฐเดฟเดคเดฏเดฟเตฝ, เดเดธเตผ เดจเดฎเดธเตเดเดพเดฐเดคเตเดคเดฟเดฒเตเดเต เดเดฒเตเดฒเดพเดนเตเดตเดฟเดจเต เดธเตเดฎเดฐเดฟเดเตเดเดพเด. เด เดธเดฎเดฏเด เดฆเตเดเดเตพเดเตเดเต เดเดคเตเดคเดฐเด เดฒเดญเดฟเดเตเดเตเดจเตเดจเดคเดพเดเดเตเดเต."
                    },
                    {
                        "message": "เดเดธเตผ เดจเดฎเดธเตเดเดพเดฐเด! เดจเตเดฎเตเดชเดฟเตปเตเดฑเต เดเตเดทเตเดฃเดคเตเดคเดฟเดฒเตเด, เดฆเตเดตเดธเตเดฎเดฐเดฃเดฏเดฟเตฝ เดฎเตเดดเตเดเดพเด. เด เดธเดฎเดฏเด เดธเตฝเดเตผเดฎเตเดฎเดเตเดเตพเดเตเดเดพเดฏเดฟ เดเดชเดฏเตเดเดฟเดเตเดเดพเด."
                    },
                    {
                        "message": "เดเดธเตผ เดจเดฎเดธเตเดเดพเดฐเด! เด เดธเดพเดฏเดพเดนเตเดจเดคเตเดคเดฟเตฝ, เดจเดฟเดเตเดเดณเตเดเต เดคเตเดฑเตเดฑเตเดเตพ เดเตผเดคเตเดคเต เดชเดถเตเดเดพเดคเตเดคเดชเดฟเดเตเดเตเด. เดจเดฒเตเดฒ เดเดฟเดจเตเดคเดเดณเตเดเต เดฎเตเดจเตเดจเตเดเตเดเต เดชเตเดเดพเดจเดพเดฏเดฟ เดเดฒเตเดฒเดพเดนเตเดตเดฟเดจเตเดเต เดชเตเดฐเดพเตผเดคเตเดฅเดฟเดเตเดเตเด."
                    },
                    {
                        "message": "เดเดธเตผ เดธเดฎเดฏเด! เด เดชเตเดฃเตเดฏเดฎเดพเดธเดคเตเดคเดฟเตฝ, เดจเดฟเดเตเดเดณเตเดเต เดเตเดตเดฟเดคเดคเตเดคเดฟเดฒเต เดฒเดเตเดทเตเดฏเดเตเดเดณเตเดเตเดเตเดฑเดฟเดเตเดเต เดเดฟเดจเตเดคเดฟเดเตเดเตเด. เดจเดฟเดเตเดเดณเตเดเต เดธเตเดตเดชเตเดจเดเตเดเตพ เดฏเดพเดฅเดพเตผเดคเตเดฅเตเดฏเดฎเดพเดเตเดเดพเตป เดเดฒเตเดฒเดพเดนเตเดตเดฟเดจเตเดเต เดชเตเดฐเดพเตผเดคเตเดฅเดฟเดเตเดเตเด."
                    },
                    {
                        "message": "เดเดธเตผ! เด เดธเดพเดฏเดพเดนเตเดจเดคเตเดคเดฟเตฝ, เดเดฒเตเดฒเดพเดนเตเดตเดฟเตปเตเดฑเต เดเดพเดฐเตเดฃเตเดฏเด เดคเตเดเดพเด. เดจเดฎเตเดฎเตเดเต เดชเตเดฐเดฟเดฏเดชเตเดชเตเดเตเดเดตเตผเดเตเดเตเด เดฒเตเดเดคเตเดคเดฟเดจเตเด เดตเตเดฃเตเดเดฟ เดชเตเดฐเดพเตผเดคเตเดฅเดฟเดเตเดเดพเด."
                    }
                ]
            }, {
                "Maghrib": [
                    {
                        "message": "เดฎเดเตโเดฐเดฟเดฌเต เดจเดฎเดธเตเดเดพเดฐเด! เดจเตเดฎเตเดชเต เดคเตเดฑเดเตเดเตเดฎเตเดชเตเตพ เดฆเตเดเดเตเดเต เดเดคเตเดคเดฐเด เดฒเดญเดฟเดเตเดเตเด. เด เดธเดจเตเดงเตเดฏเดฏเดฟเตฝ, เดจเดฎเตเดฎเตเดเต เดจเตเดฎเตเดชเต เดคเตเดฑเดเตเดเดพเด. เดเดฒเตเดฒเดพเดนเตเดตเดฟเตปเตเดฑเต เดเดจเตเดเตเดฐเดนเดคเตเดคเดฟเดจเต เดจเดจเตเดฆเดฟ เดชเดฑเดฏเดพเด."
                    },
                    {
                        "message": "เดฑเดฎเดฆเดพเดจเดฟเดฒเต เด เดธเดจเตเดงเตเดฏเดฏเดฟเตฝ, เดฎเดเตโเดฐเดฟเดฌเต เดจเดฎเดธเตเดเดพเดฐเดคเตเดคเดฟเดฒเตเดเต เดจเดฌเดฟ(เดธ) เดชเดฑเดเตเดเต: เดจเตเดฎเตเดชเตเดเดพเดฐเดจเต เดจเตเดฎเตเดชเต เดคเตเดฑเดเตเดเตเดฎเตเดชเตเตพ เดธเดจเตเดคเตเดทเดฎเตเดฃเตเดเต. เด เดธเดจเตเดคเตเดทเด เดชเดเตเดเดฟเดเดพเด."
                    },
                    {
                        "message": "เดฎเดเตโเดฐเดฟเดฌเต เดธเดฎเดฏเด! เดเดฒเตเดฒเดพเดนเตเดตเดฟเตปเตเดฑเต เดธเตเดฎเดฐเดฃเดฏเดฟเตฝ เดจเดฎเตเดฎเตเดเต เดฎเดจเดธเตเดธเดฟเดจเต เดถเดพเดจเตเดคเดฎเดพเดเตเดเดพเด. เดจเดฟเดเตเดเดณเตเดเต เดฐเดเตเดทเดฟเดคเดพเดตเดฟเดจเต เดจเดฟเดเตเดเตพ เดตเดฟเดณเดฟเดเตเดเต เดชเตเดฐเดพเตผเดคเตเดฅเดฟเดเตเดเตเด. เดคเตเตผเดเตเดเดฏเดพเดฏเตเด เดเดตเตป เดชเตเดฐเดพเตผเดคเตเดฅเดจเดเตเดเต เดเดคเตเดคเดฐเด เดจเตฝเดเตเดจเตเดจเดตเดจเดพเดฃเต."
                    },
                    {
                        "message": "เดฎเดเตโเดฐเดฟเดฌเต เดจเดฎเดธเตเดเดพเดฐเด! เด เดธเดจเตเดงเตเดฏเดฏเดฟเตฝ, เดจเดฟเดเตเดเดณเตเดเต เดจเตเดฎเตเดชเต เดคเตเดฑเดเตเดเตเด. เดเดฒเตเดฒเดพเดนเตเดตเดฟเตปเตเดฑเต เดเดจเตเดเตเดฐเดนเดคเตเดคเดฟเดจเต เดจเดจเตเดฆเดฟ เดชเดฑเดฏเตเด. เดจเดฟเดเตเดเดณเตเดเต เดเตเดเตเดเดฌเดคเตเดคเตเดเตเดชเตเดชเด เดธเดจเตเดคเตเดทเด เดชเดเตเดเดฟเดเตเด."
                    },
                    {
                        "message": "เดฎเดเตโเดฐเดฟเดฌเต! เด เดธเดจเตเดงเตเดฏเดฏเดฟเตฝ, เดจเดฟเดเตเดเดณเตเดเต เดเตเดฑเตเดฑเตเดฎเตเดณเตเดณเดตเตผเดเตเดเต เดตเตเดฃเตเดเดฟ เดชเตเดฐเดพเตผเดคเตเดฅเดฟเดเตเดเตเด. เดเดตเดฐเตเดเต เดธเดจเตเดคเตเดทเดคเตเดคเดฟเดจเดพเดฏเดฟ เดเดฒเตเดฒเดพเดนเตเดตเดฟเดจเตเดเต เดเดชเตเดเตเดทเดฟเดเตเดเตเด."
                    },
                    {
                        "message": "เดธเดจเตเดงเตเดฏเดฏเตเดเต เดฎเดจเตเดนเดพเดฐเดฟเดคเดฏเดฟเตฝ, เดฎเดเตโเดฐเดฟเดฌเต เดจเดฎเดธเตเดเดพเดฐเดคเตเดคเดฟเดฒเตเดเต เดจเตเดฎเตเดชเต เดคเตเดฑเดเตเดเดพเด. เด เดธเดฎเดฏเด เดชเตเดฐเดพเตผเดคเตเดฅเดจเดเตพเดเตเดเต เดเดคเตเดคเดฐเด เดฒเดญเดฟเดเตเดเตเดจเตเดจเดคเดพเดเดเตเดเต."
                    },
                    {
                        "message": "เดฎเดเตโเดฐเดฟเดฌเต เดจเดฎเดธเตเดเดพเดฐเด! เดจเตเดฎเตเดชเต เดคเตเดฑเดเตเดเตเดจเตเดจ เด เดตเตเดณเดฏเดฟเตฝ, เดฆเตเดตเดธเตเดฎเดฐเดฃเดฏเดฟเตฝ เดฎเตเดดเตเดเดพเด. เด เดธเดฎเดฏเด เดธเตฝเดเตผเดฎเตเดฎเดเตเดเตพเดเตเดเดพเดฏเดฟ เดเดชเดฏเตเดเดฟเดเตเดเดพเด."
                    },
                    {
                        "message": "เดฎเดเตโเดฐเดฟเดฌเต เดจเดฎเดธเตเดเดพเดฐเด! เด เดธเดจเตเดงเตเดฏเดฏเดฟเตฝ, เดจเดฟเดเตเดเดณเตเดเต เดคเตเดฑเตเดฑเตเดเตพ เดเตผเดคเตเดคเต เดชเดถเตเดเดพเดคเตเดคเดชเดฟเดเตเดเตเด. เดจเดฒเตเดฒ เดเดฟเดจเตเดคเดเดณเตเดเต เดจเตเดฎเตเดชเต เดคเตเดฑเดเตเดเตเด."
                    },
                    {
                        "message": "เดฎเดเตโเดฐเดฟเดฌเต เดธเดฎเดฏเด! เด เดชเตเดฃเตเดฏเดฎเดพเดธเดคเตเดคเดฟเตฝ, เดจเตเดฎเตเดชเต เดคเตเดฑเดเตเดเตเดจเตเดจเดคเดฟเตปเตเดฑเต เดชเตเดฐเดพเดงเดพเดจเตเดฏเดคเตเดคเตเดเตเดเตเดฑเดฟเดเตเดเต เดเดฟเดจเตเดคเดฟเดเตเดเตเด. เดจเดฟเดเตเดเดณเตเดเต เดเตเดตเดฟเดคเดคเตเดคเดฟเดฒเต เดเดจเตเดเตเดฐเดนเดเตเดเตพเดเตเดเต เดจเดจเตเดฆเดฟ เดชเดฑเดฏเตเด."
                    },
                    {
                        "message": "เดฎเดเตโเดฐเดฟเดฌเต! เด เดธเดจเตเดงเตเดฏเดฏเดฟเตฝ, เดเดฒเตเดฒเดพเดนเตเดตเดฟเตปเตเดฑเต เดเดพเดฐเตเดฃเตเดฏเด เดคเตเดเดพเด. เดจเดฎเตเดฎเตเดเต เดชเตเดฐเดฟเดฏเดชเตเดชเตเดเตเดเดตเตผเดเตเดเตเด เดฒเตเดเดคเตเดคเดฟเดจเตเด เดตเตเดฃเตเดเดฟ เดชเตเดฐเดพเตผเดคเตเดฅเดฟเดเตเดเดพเด."
                    }
                ]
            }, {
                "Isha": [
                    {
                        "message": "เดเดทเดพ เดจเดฎเดธเตเดเดพเดฐเด! เดเดฐเตเดเตเดเดฟเดฒเตเด เดเดทเดพ เดจเดฎเดธเตเดเดพเดฐเด เดเดฎเดพเดเดคเตเดคเดพเดฏเดฟ เดจเดฟเตผเดตเดนเดฟเดเตเดเดพเตฝ, เดเดตเตป เดฐเดพเดคเตเดฐเดฟเดฏเตเดเต เดชเดเตเดคเดฟ เดจเดฎเดธเตเดเดฐเดฟเดเตเดเดตเดจเตเดชเตเดชเตเดฒเตเดฏเดพเดฃเต. เด เดฐเดพเดคเตเดฐเดฟเดฏเดฟเตฝ, เดคเดฑเดพเดตเตเดนเต เดจเดฎเดธเตเดเดพเดฐเดคเตเดคเดฟเตฝ เดชเดเตเดเตเดเตเดเตเดเดพเด."
                    },
                    {
                        "message": "เดฑเดฎเดฆเดพเดจเดฟเดฒเต เด เดฐเดพเดคเตเดฐเดฟเดฏเดฟเตฝ, เดเดทเดพ เดจเดฎเดธเตเดเดพเดฐเดคเตเดคเดฟเดฒเตเดเต เดจเดฌเดฟ(เดธ) เดชเดฑเดเตเดเต: เดจเดฟเดเตเดเตพ เดคเดฑเดพเดตเตเดนเต เดจเดฎเดธเตเดเดฐเดฟเดเตเดเตเด. เดเดฒเตเดฒเดพเดนเต เดจเดฟเดเตเดเตพเดเตเดเตเดณเตเดณ เดชเดพเดชเดเตเดเตพ เดชเตเดฑเตเดคเตเดคเตเดคเดฐเตเด. เดเตเตผเดเตป เดชเดพเดฐเดพเดฏเดฃเด เดเตเดฏเตเดฏเดพเด."
                    },
                    {
                        "message": "เดเดทเดพ เดธเดฎเดฏเด! เดเดฒเตเดฒเดพเดนเตเดตเดฟเตปเตเดฑเต เดธเตเดฎเดฐเดฃเดฏเดฟเตฝ เดจเดฎเตเดฎเตเดเต เดฎเดจเดธเตเดธเดฟเดจเต เดถเดพเดจเตเดคเดฎเดพเดเตเดเดพเด. เดจเดฟเดเตเดเตพ เดเดฒเตเดฒเดพเดนเตเดตเดฟเดจเต เดธเตเดฎเดฐเดฟเดเตเดเตเดฎเตเดชเตเตพ เดจเดฟเดเตเดเดณเตเดเต เดนเตเดฆเดฏเดเตเดเตพ เดถเดพเดจเตเดคเดฎเดพเดตเตเดจเตเดจเต."
                    },
                    {
                        "message": "เดเดทเดพ เดจเดฎเดธเตเดเดพเดฐเด! เด เดฐเดพเดคเตเดฐเดฟเดฏเดฟเตฝ, เดคเดฑเดพเดตเตเดนเต เดจเดฎเดธเตเดเดพเดฐเดคเตเดคเดฟเตฝ เดชเดเตเดเตเดเตเดเตเดเตเด. เดเดฒเตเดฒเดพเดนเตเดตเดฟเตปเตเดฑเต เดเดจเตเดเตเดฐเดนเด เดคเตเดเตเด. เดจเดฟเดเตเดเดณเตเดเต เดเตเดตเดฟเดคเดคเตเดคเดฟเดฒเต เดธเดฎเดพเดงเดพเดจเดคเตเดคเดฟเดจเดพเดฏเดฟ เดชเตเดฐเดพเตผเดคเตเดฅเดฟเดเตเดเตเด."
                    },
                    {
                        "message": "เดเดทเดพ! เด เดฐเดพเดคเตเดฐเดฟเดฏเดฟเตฝ, เดจเดฟเดเตเดเดณเตเดเต เดเตเดฑเตเดฑเตเดฎเตเดณเตเดณเดตเตผเดเตเดเต เดตเตเดฃเตเดเดฟ เดชเตเดฐเดพเตผเดคเตเดฅเดฟเดเตเดเตเด. เดเดตเดฐเตเดเต เดธเดจเตเดคเตเดทเดคเตเดคเดฟเดจเดพเดฏเดฟ เดเดฒเตเดฒเดพเดนเตเดตเดฟเดจเตเดเต เดเดชเตเดเตเดทเดฟเดเตเดเตเด."
                    },
                    {
                        "message": "เดฐเดพเดคเตเดฐเดฟเดฏเตเดเต เดถเดพเดจเตเดคเดคเดฏเดฟเตฝ, เดเดทเดพ เดจเดฎเดธเตเดเดพเดฐเดคเตเดคเดฟเดฒเตเดเต เดคเดฑเดพเดตเตเดนเต เดจเดฎเดธเตเดเดพเดฐเดคเตเดคเดฟเตฝ เดชเดเตเดเตเดเตเดเตเดเดพเด. เด เดธเดฎเดฏเด เดชเตเดฐเดพเตผเดคเตเดฅเดจเดเตพเดเตเดเต เดเดคเตเดคเดฐเด เดฒเดญเดฟเดเตเดเตเดจเตเดจเดคเดพเดเดเตเดเต."
                    },
                    {
                        "message": "เดเดทเดพ เดจเดฎเดธเตเดเดพเดฐเด! เด เดตเตเดณเดฏเดฟเตฝ, เดฆเตเดตเดธเตเดฎเดฐเดฃเดฏเดฟเตฝ เดฎเตเดดเตเดเดพเด. เดคเดฑเดพเดตเตเดนเต เดจเดฎเดธเตเดเดพเดฐเดคเตเดคเดฟเตฝ เดชเดเตเดเตเดเตเดเตเดเดพเด."
                    },
                    {
                        "message": "เดเดทเดพ เดจเดฎเดธเตเดเดพเดฐเด! เด เดฐเดพเดคเตเดฐเดฟเดฏเดฟเตฝ, เดจเดฟเดเตเดเดณเตเดเต เดคเตเดฑเตเดฑเตเดเตพ เดเตผเดคเตเดคเต เดชเดถเตเดเดพเดคเตเดคเดชเดฟเดเตเดเตเด. เดจเดฒเตเดฒ เดเดฟเดจเตเดคเดเดณเตเดเต เดเดฑเดเตเดเตเด."
                    },
                    {
                        "message": "เดเดทเดพ เดธเดฎเดฏเด! เด เดชเตเดฃเตเดฏเดฎเดพเดธเดคเตเดคเดฟเตฝ, เดฐเดพเดคเตเดฐเดฟเดฏเตเดเต เดถเดพเดจเตเดคเดคเดฏเดฟเตฝ เดเดฒเตเดฒเดพเดนเตเดตเดฟเดจเต เดเตผเดเตเดเตเด. เดจเดฟเดเตเดเดณเตเดเต เดเตเดตเดฟเดคเดคเตเดคเดฟเดฒเต เดธเดจเตเดคเตเดทเดคเตเดคเดฟเดจเดพเดฏเดฟ เดชเตเดฐเดพเตผเดคเตเดฅเดฟเดเตเดเตเด."
                    },
                    {
                        "message": "เดเดทเดพ! เด เดฐเดพเดคเตเดฐเดฟเดฏเดฟเตฝ, เดเดฒเตเดฒเดพเดนเตเดตเดฟเตปเตเดฑเต เดเดพเดฐเตเดฃเตเดฏเด เดคเตเดเดพเด. เดจเดฎเตเดฎเตเดเต เดชเตเดฐเดฟเดฏเดชเตเดชเตเดเตเดเดตเตผเดเตเดเตเด เดฒเตเดเดคเตเดคเดฟเดจเตเด เดตเตเดฃเตเดเดฟ เดชเตเดฐเดพเตผเดคเตเดฅเดฟเดเตเดเดพเด."
                    }
                ]
            },

            ]
            const prayerObj = msg.find(obj => obj[prayer]);

            if (prayerObj) {
                const prayerMessages = prayerObj[prayer];

                // Select a random message
                var randomMessage = prayerMessages[Math.floor(Math.random() * prayerMessages.length)].message;
            } else {
                randomMessage = "ok";
            }
            let subscribers = fs.existsSync('subscribers.json')
                ? JSON.parse(fs.readFileSync('subscribers.json', 'utf-8'))
                : [];
                for (const subscriber of subscribers) {
                    const delay = Math.floor(Math.random() * 2000) + 2000; // Random delay between 2000ms (2s) to 4000ms (4s)
                    
                    await new Promise(resolve => setTimeout(resolve, delay));
                    
                    await sock.sendMessage(subscriber, { text: randomMessage });
                }
        },{timezone:timeZone});
        console.log(`Scheduled ${prayer} reminder at ${hour}:${minute} using cron "${cronTime}"`);
    });
}

startBot();

// Run health check every 1 minute
cron.schedule('* * * * *', () => {
    console.log(`๐ข Health check performed at ${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}`);
});

const checkHealth = () => {
    http.get('https://azan-reminder-bo.onrender.com', (res) => {
        let data = '';

        res.on('data', chunk => data += chunk);
        res.on('end', () => console.log(`๐ข Health Check: ${data}`));
    }).on('error', (err) => {
        console.error('โ Health Check Failed:', err.message);
    });
};

// Run health check every 1 minute
setInterval(checkHealth, 60 * 1000);


